<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle" />
              <option name="originalContent" value="plugins {&#10;    id 'com.android.application'&#10;    id 'org.jetbrains.kotlin.android'&#10;    id 'org.jetbrains.kotlin.kapt'&#10;    id 'kotlin-parcelize'&#10;}&#10;&#10;android {&#10;    namespace &quot;com.picpay.desafio.android&quot;&#10;    compileSdk 34&#10;&#10;    defaultConfig {&#10;        applicationId &quot;com.picpay.desafio.android&quot;&#10;        minSdk 24&#10;        //targetSdk 34&#10;        versionCode 1&#10;        versionName &quot;1.0&quot;&#10;        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility JavaVersion.VERSION_17&#10;        targetCompatibility JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions { jvmTarget = '17' }&#10;//&#10;//    buildFeatures { compose true }&#10;//    composeOptions { kotlinCompilerExtensionVersion '1.5.14' }&#10;}&#10;&#10;dependencies {&#10;    // Base AndroidX&#10;    implementation &quot;androidx.core:core-ktx:1.13.1&quot;&#10;    implementation &quot;androidx.appcompat:appcompat:1.7.0&quot;&#10;    implementation &quot;androidx.constraintlayout:constraintlayout:2.1.4&quot;&#10;    implementation &quot;com.google.android.material:material:1.12.0&quot;&#10;&#10;    // Gson (atualizado)&#10;    implementation &quot;com.google.code.gson:gson:2.11.0&quot;&#10;&#10;    // Retrofit/OkHttp (com RxJava2 adapter)&#10;    def retrofit_version = &quot;2.9.0&quot;&#10;    def okhttp_version   = &quot;4.12.0&quot;&#10;    implementation &quot;com.squareup.retrofit2:retrofit:$retrofit_version&quot;&#10;    implementation &quot;com.squareup.retrofit2:adapter-rxjava2:$retrofit_version&quot;&#10;    implementation &quot;com.squareup.retrofit2:converter-gson:$retrofit_version&quot;&#10;    implementation &quot;com.squareup.okhttp3:okhttp:$okhttp_version&quot;&#10;    testImplementation &quot;com.squareup.okhttp3:mockwebserver:$okhttp_version&quot;&#10;&#10;    // Picasso (se precisar)&#10;    implementation 'com.squareup.picasso:picasso:2.8'&#10;&#10;//    // Compose (BOM cuida das versões)&#10;//    def composeBom = platform(&quot;androidx.compose:compose-bom:2024.12.00&quot;)&#10;//    implementation composeBom&#10;//    androidTestImplementation composeBom&#10;//    implementation &quot;androidx.activity:activity-compose:1.9.2&quot;&#10;//    implementation &quot;androidx.compose.ui:ui&quot;&#10;//    implementation &quot;androidx.compose.material3:material3&quot;&#10;//    implementation &quot;androidx.compose.ui:ui-tooling-preview&quot;&#10;//    debugImplementation &quot;androidx.compose.ui:ui-tooling&quot;&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    id 'com.android.application'&#10;    id 'org.jetbrains.kotlin.android'&#10;    id 'org.jetbrains.kotlin.kapt'&#10;    id 'kotlin-parcelize'&#10;}&#10;&#10;android {&#10;    namespace &quot;com.picpay.desafio.android&quot;&#10;    compileSdk 34&#10;&#10;    defaultConfig {&#10;        applicationId &quot;com.picpay.desafio.android&quot;&#10;        minSdk 24&#10;        //targetSdk 34&#10;        versionCode 1&#10;        versionName &quot;1.0&quot;&#10;        testInstrumentationRunner &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    compileOptions {&#10;        sourceCompatibility JavaVersion.VERSION_17&#10;        targetCompatibility JavaVersion.VERSION_17&#10;    }&#10;    kotlinOptions { jvmTarget = '17' }&#10;//&#10;//    buildFeatures { compose true }&#10;//    composeOptions { kotlinCompilerExtensionVersion '1.5.14' }&#10;}&#10;&#10;dependencies {&#10;    // Base AndroidX&#10;    implementation &quot;androidx.core:core-ktx:1.13.1&quot;&#10;    implementation &quot;androidx.appcompat:appcompat:1.7.0&quot;&#10;    implementation &quot;androidx.constraintlayout:constraintlayout:2.1.4&quot;&#10;    implementation &quot;com.google.android.material:material:1.12.0&quot;&#10;&#10;    // Gson (atualizado)&#10;    implementation &quot;com.google.code.gson:gson:2.11.0&quot;&#10;&#10;    // Retrofit/OkHttp (com RxJava2 adapter)&#10;    def retrofit_version = &quot;2.9.0&quot;&#10;    def okhttp_version   = &quot;4.12.0&quot;&#10;    implementation &quot;com.squareup.retrofit2:retrofit:$retrofit_version&quot;&#10;    implementation &quot;com.squareup.retrofit2:adapter-rxjava2:$retrofit_version&quot;&#10;    implementation &quot;com.squareup.retrofit2:converter-gson:$retrofit_version&quot;&#10;    implementation &quot;com.squareup.okhttp3:okhttp:$okhttp_version&quot;&#10;    testImplementation &quot;com.squareup.okhttp3:mockwebserver:$okhttp_version&quot;&#10;&#10;    // Picasso (se precisar)&#10;    implementation 'com.squareup.picasso:picasso:2.8'&#10;    // CircleImageView&#10;    implementation 'de.hdodenhof:circleimageview:3.1.0'&#10;&#10;//    // Compose (BOM cuida das versões)&#10;//    def composeBom = platform(&quot;androidx.compose:compose-bom:2024.12.00&quot;)&#10;//    implementation composeBom&#10;//    androidTestImplementation composeBom&#10;//    implementation &quot;androidx.activity:activity-compose:1.9.2&quot;&#10;//    implementation &quot;androidx.compose.ui:ui&quot;&#10;//    implementation &quot;androidx.compose.material3:material3&quot;&#10;//    implementation &quot;androidx.compose.ui:ui-tooling-preview&quot;&#10;//    debugImplementation &quot;androidx.compose.ui:ui-tooling&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/picpay/desafio/android/User.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/picpay/desafio/android/User.kt" />
              <option name="originalContent" value="package com.picpay.desafio.android&#10;&#10;import android.os.Parcelable&#10;import com.google.gson.annotations.SerializedName&#10;import kotlinx.android.parcel.Parcelize&#10;&#10;@Parcelize&#10;data class User(&#10;    @SerializedName(&quot;img&quot;) val img: String,&#10;    @SerializedName(&quot;name&quot;) val name: String,&#10;    @SerializedName(&quot;id&quot;) val id: Int,&#10;    @SerializedName(&quot;username&quot;) val username: String&#10;) : Parcelable" />
              <option name="updatedContent" value="package com.picpay.desafio.android&#10;&#10;import android.os.Parcelable&#10;import com.google.gson.annotations.SerializedName&#10;import kotlinx.parcelize.Parcelize&#10;&#10;@Parcelize&#10;data class User(&#10;    @SerializedName(&quot;img&quot;) val img: String,&#10;    @SerializedName(&quot;name&quot;) val name: String,&#10;    @SerializedName(&quot;id&quot;) val id: Int,&#10;    @SerializedName(&quot;username&quot;) val username: String&#10;) : Parcelable" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/picpay/desafio/android/UserListItemViewHolder.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/picpay/desafio/android/UserListItemViewHolder.kt" />
              <option name="originalContent" value="package com.picpay.desafio.android&#10;&#10;import android.view.View&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.squareup.picasso.Callback&#10;import com.squareup.picasso.Picasso&#10;import kotlinx.android.synthetic.main.list_item_user.view.*&#10;&#10;class UserListItemViewHolder(&#10;    itemView: View&#10;) : RecyclerView.ViewHolder(itemView) {&#10;&#10;    fun bind(user: User) {&#10;        name.text = user.name&#10;        username.text = user.username&#10;        progressBar.visibility = View.VISIBLE&#10;        Picasso.get()&#10;            .load(user.img)&#10;            .error(R.drawable.ic_round_account_circle)&#10;            .into(itemView.picture, object : Callback {&#10;                override fun onSuccess() {&#10;                    itemView.progressBar.visibility = View.GONE&#10;                }&#10;&#10;                override fun onError(e: Exception?) {&#10;                    itemView.progressBar.visibility = View.GONE&#10;                }&#10;            })&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.picpay.desafio.android&#10;&#10;import android.view.View&#10;import android.widget.ImageView&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.squareup.picasso.Callback&#10;import com.squareup.picasso.Picasso&#10;&#10;class UserListItemViewHolder(&#10;    itemView: View&#10;) : RecyclerView.ViewHolder(itemView) {&#10;    private val name: TextView = itemView.findViewById(R.id.name)&#10;    private val username: TextView = itemView.findViewById(R.id.username)&#10;    private val progressBar: ProgressBar = itemView.findViewById(R.id.progressBar)&#10;    private val picture: ImageView = itemView.findViewById(R.id.picture)&#10;&#10;    fun bind(user: User) {&#10;        name.text = user.name&#10;        username.text = user.username&#10;        progressBar.visibility = View.VISIBLE&#10;        Picasso.get()&#10;            .load(user.img)&#10;            .error(R.drawable.ic_round_account_circle)&#10;            .into(picture, object : Callback {&#10;                override fun onSuccess() {&#10;                    progressBar.visibility = View.GONE&#10;                }&#10;&#10;                override fun onError(e: Exception?) {&#10;                    progressBar.visibility = View.GONE&#10;                }&#10;            })&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle" />
              <option name="originalContent" value="plugins {&#10;    id &quot;com.android.application&quot; version '8.12.0' apply false&#10;    id &quot;org.jetbrains.kotlin.android&quot; version &quot;1.9.24&quot; apply false&#10;    id &quot;org.jetbrains.kotlin.kapt&quot; version &quot;1.9.24&quot; apply false &#10;}&#10;&#10;tasks.register(&quot;clean&quot;, Delete) {&#10;    delete rootProject.buildDir&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.android.library) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    alias(libs.plugins.kotlin.kapt) apply false&#10;    alias(libs.plugins.kotlin.parcelize) apply false&#10;}&#10;&#10;tasks.register(&quot;clean&quot;, Delete) {&#10;    delete rootProject.buildDir&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/designsystem/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/designsystem/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.bina.core.designsystem&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 26&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.compose.bom)&#10;    implementation(libs.androidx.ui.graphics.android)&#10;    implementation(libs.androidx.ui.text.android)&#10;    implementation(libs.androidx.material3.android)&#10;    implementation(libs.androidx.ui.tooling.preview.android)&#10;    implementation(libs.androidx.ui.tooling)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.bina.core.designsystem&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 26&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.compose.ui)&#10;    implementation(libs.compose.material3)&#10;    implementation(libs.compose.ui.tooling.preview)&#10;    implementation(libs.compose.ui.tooling)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/designsystem/src/main/java/com/bina/core/designsystem/preview/DimensPreview.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/designsystem/src/main/java/com/bina/core/designsystem/preview/DimensPreview.kt" />
              <option name="originalContent" value="package com.bina.core.designsystem.preview&#10;&#10;import android.view.Surface&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.bina.core.designsystem.dimens.Dimens&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun DimensPreview() {&#10;    val dimens = listOf(&#10;        &quot;spacing2&quot; to Dimens.spacing2,&#10;        &quot;spacing4&quot; to Dimens.spacing4,&#10;        &quot;spacing8&quot; to Dimens.spacing8,&#10;        &quot;spacing12&quot; to Dimens.spacing12,&#10;        &quot;spacing16&quot; to Dimens.spacing16,&#10;        &quot;spacing24&quot; to Dimens.spacing24,&#10;        &quot;spacing32&quot; to Dimens.spacing32,&#10;        &quot;spacing40&quot; to Dimens.spacing40,&#10;        &quot;spacing64&quot; to Dimens.spacing64,&#10;    )&#10;    Surface(color = MaterialTheme.colorScheme.background) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            dimens.forEach { (name, value) -&gt;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .height(24.dp)&#10;                            .width(value)&#10;                            .background(Color.Gray)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;                    Text(text = &quot;$name = ${value.value.toInt()}dp&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.bina.core.designsystem.preview&#10;&#10;import android.view.Surface&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.bina.core.designsystem.dimens.Dimens&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun DimensPreview() {&#10;    val dimens = listOf(&#10;        &quot;spacing2&quot; to Dimens.spacing2,&#10;        &quot;spacing4&quot; to Dimens.spacing4,&#10;        &quot;spacing8&quot; to Dimens.spacing8,&#10;        &quot;spacing12&quot; to Dimens.spacing12,&#10;        &quot;spacing16&quot; to Dimens.spacing16,&#10;        &quot;spacing24&quot; to Dimens.spacing24,&#10;        &quot;spacing32&quot; to Dimens.spacing32,&#10;        &quot;spacing40&quot; to Dimens.spacing40,&#10;        &quot;spacing64&quot; to Dimens.spacing64,&#10;    )&#10;    Surface(color = MaterialTheme.colorScheme.background) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            dimens.forEach { (name, value) -&gt;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .height(24.dp)&#10;                            .width(value)&#10;                            .background(Color.Gray)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;                    Text(text = &quot;$name = ${value.value.toInt()}dp&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;androidGradlePlugin = &quot;8.11.0&quot;&#10;kotlin = &quot;1.9.24&quot;&#10;composeBom = &quot;2024.12.00&quot;&#10;retrofit = &quot;2.9.0&quot;&#10;okhttp = &quot;4.12.0&quot;&#10;gson = &quot;2.11.0&quot;&#10;picasso = &quot;2.8&quot;&#10;circleimageview = &quot;3.1.0&quot;&#10;uiToolingPreview = &quot;1.8.3&quot;&#10;uiTooling = &quot;1.8.3&quot;&#10;material3 = &quot;1.3.2&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { module = &quot;androidx.core:core-ktx&quot;, version = &quot;1.13.1&quot; }&#10;androidx-appcompat = { module = &quot;androidx.appcompat:appcompat&quot;, version = &quot;1.7.0&quot; }&#10;androidx-constraintlayout = { module = &quot;androidx.constraintlayout:constraintlayout&quot;, version = &quot;2.1.4&quot; }&#10;material = { module = &quot;com.google.android.material:material&quot;, version = &quot;1.12.0&quot; }&#10;gson = { module = &quot;com.google.code.gson:gson&quot;, version.ref = &quot;gson&quot; }&#10;retrofit2 = { module = &quot;com.squareup.retrofit2:retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;retrofit2-adapter-rxjava2 = { module = &quot;com.squareup.retrofit2:adapter-rxjava2&quot;, version.ref = &quot;retrofit&quot; }&#10;retrofit2-converter-gson = { module = &quot;com.squareup.retrofit2:converter-gson&quot;, version.ref = &quot;retrofit&quot; }&#10;okhttp3 = { module = &quot;com.squareup.okhttp3:okhttp&quot;, version.ref = &quot;okhttp&quot; }&#10;okhttp3-mockwebserver = { module = &quot;com.squareup.okhttp3:mockwebserver&quot;, version.ref = &quot;okhttp&quot; }&#10;picasso = { module = &quot;com.squareup.picasso:picasso&quot;, version.ref = &quot;picasso&quot; }&#10;circleimageview = { module = &quot;de.hdodenhof:circleimageview&quot;, version.ref = &quot;circleimageview&quot; }&#10;&#10;# Compose&#10;androidx-compose-bom = { module = &quot;androidx.compose:compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;activity-compose = { module = &quot;androidx.activity:activity-compose&quot;, version = &quot;1.9.2&quot; }&#10;compose-ui = { module = &quot;androidx.compose.ui:ui&quot; }&#10;compose-material3 = { module = &quot;androidx.compose.material3:material3&quot; }&#10;compose-ui-tooling-preview = { module = &quot;androidx.compose.ui:ui-tooling-preview&quot; }&#10;compose-ui-tooling = { module = &quot;androidx.compose.ui:ui-tooling&quot; }&#10;&#10;# Test&#10;junit = { module = &quot;junit:junit&quot;, version = &quot;4.13.2&quot; }&#10;androidx-junit = { module = &quot;androidx.test.ext:junit&quot;, version = &quot;1.1.5&quot; }&#10;androidx-espresso-core = { module = &quot;androidx.test.espresso:espresso-core&quot;, version = &quot;3.5.1&quot; }&#10;&#10;# Navigation&#10;androidx-runtime-android = { module = &quot;androidx.compose.runtime:runtime&quot; }&#10;androidx-navigation-compose-android = { module = &quot;androidx.navigation:navigation-compose&quot;, version = &quot;2.7.7&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot;, version.ref = &quot;uiToolingPreview&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot;, version.ref = &quot;uiTooling&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot;, version.ref = &quot;material3&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;androidGradlePlugin&quot; }&#10;android-library = { id = &quot;com.android.library&quot;, version.ref = &quot;androidGradlePlugin&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-kapt = { id = &quot;org.jetbrains.kotlin.kapt&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-parcelize = { id = &quot;org.jetbrains.kotlin.plugin.parcelize&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }&#10;&#10;" />
              <option name="updatedContent" value="[versions]&#10;androidGradlePlugin = &quot;8.11.0&quot;&#10;kotlin = &quot;1.9.24&quot;&#10;composeBom = &quot;2024.05.00&quot;&#10;retrofit = &quot;2.9.0&quot;&#10;okhttp = &quot;4.12.0&quot;&#10;gson = &quot;2.11.0&quot;&#10;picasso = &quot;2.8&quot;&#10;circleimageview = &quot;3.1.0&quot;&#10;uiToolingPreview = &quot;1.8.3&quot;&#10;uiTooling = &quot;1.8.3&quot;&#10;material3 = &quot;1.3.2&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { module = &quot;androidx.core:core-ktx&quot;, version = &quot;1.13.1&quot; }&#10;androidx-appcompat = { module = &quot;androidx.appcompat:appcompat&quot;, version = &quot;1.7.0&quot; }&#10;androidx-constraintlayout = { module = &quot;androidx.constraintlayout:constraintlayout&quot;, version = &quot;2.1.4&quot; }&#10;material = { module = &quot;com.google.android.material:material&quot;, version = &quot;1.12.0&quot; }&#10;gson = { module = &quot;com.google.code.gson:gson&quot;, version.ref = &quot;gson&quot; }&#10;retrofit2 = { module = &quot;com.squareup.retrofit2:retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;retrofit2-adapter-rxjava2 = { module = &quot;com.squareup.retrofit2:adapter-rxjava2&quot;, version.ref = &quot;retrofit&quot; }&#10;retrofit2-converter-gson = { module = &quot;com.squareup.retrofit2:converter-gson&quot;, version.ref = &quot;retrofit&quot; }&#10;okhttp3 = { module = &quot;com.squareup.okhttp3:okhttp&quot;, version.ref = &quot;okhttp&quot; }&#10;okhttp3-mockwebserver = { module = &quot;com.squareup.okhttp3:mockwebserver&quot;, version.ref = &quot;okhttp&quot; }&#10;picasso = { module = &quot;com.squareup.picasso:picasso&quot;, version.ref = &quot;picasso&quot; }&#10;circleimageview = { module = &quot;de.hdodenhof:circleimageview&quot;, version.ref = &quot;circleimageview&quot; }&#10;&#10;# Compose&#10;androidx-compose-bom = { module = &quot;androidx.compose:compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;activity-compose = { module = &quot;androidx.activity:activity-compose&quot;, version = &quot;1.9.2&quot; }&#10;compose-ui = { module = &quot;androidx.compose.ui:ui&quot; }&#10;compose-material3 = { module = &quot;androidx.compose.material3:material3&quot; }&#10;compose-ui-tooling-preview = { module = &quot;androidx.compose.ui:ui-tooling-preview&quot; }&#10;compose-ui-tooling = { module = &quot;androidx.compose.ui:ui-tooling&quot; }&#10;&#10;# Test&#10;junit = { module = &quot;junit:junit&quot;, version = &quot;4.13.2&quot; }&#10;androidx-junit = { module = &quot;androidx.test.ext:junit&quot;, version = &quot;1.1.5&quot; }&#10;androidx-espresso-core = { module = &quot;androidx.test.espresso:espresso-core&quot;, version = &quot;3.5.1&quot; }&#10;&#10;# Navigation&#10;androidx-runtime-android = { module = &quot;androidx.compose.runtime:runtime&quot; }&#10;androidx-navigation-compose-android = { module = &quot;androidx.navigation:navigation-compose&quot;, version = &quot;2.7.7&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot;, version.ref = &quot;uiToolingPreview&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot;, version.ref = &quot;uiTooling&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot;, version.ref = &quot;material3&quot; }&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;androidGradlePlugin&quot; }&#10;android-library = { id = &quot;com.android.library&quot;, version.ref = &quot;androidGradlePlugin&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-kapt = { id = &quot;org.jetbrains.kotlin.kapt&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-parcelize = { id = &quot;org.jetbrains.kotlin.plugin.parcelize&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>