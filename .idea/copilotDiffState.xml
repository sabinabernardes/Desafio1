<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/picpay/desafio/android/User.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/picpay/desafio/android/User.kt" />
              <option name="originalContent" value="package com.picpay.desafio.android&#10;&#10;import android.os.Parcelable&#10;import com.google.gson.annotations.SerializedName&#10;import kotlinx.android.parcel.Parcelize&#10;&#10;@Parcelize&#10;data class User(&#10;    @SerializedName(&quot;img&quot;) val img: String,&#10;    @SerializedName(&quot;name&quot;) val name: String,&#10;    @SerializedName(&quot;id&quot;) val id: Int,&#10;    @SerializedName(&quot;username&quot;) val username: String&#10;) : Parcelable" />
              <option name="updatedContent" value="package com.picpay.desafio.android&#10;&#10;import android.os.Parcelable&#10;import com.google.gson.annotations.SerializedName&#10;import kotlinx.parcelize.Parcelize&#10;&#10;@Parcelize&#10;data class User(&#10;    @SerializedName(&quot;img&quot;) val img: String,&#10;    @SerializedName(&quot;name&quot;) val name: String,&#10;    @SerializedName(&quot;id&quot;) val id: Int,&#10;    @SerializedName(&quot;username&quot;) val username: String&#10;) : Parcelable" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/picpay/desafio/android/UserListItemViewHolder.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/picpay/desafio/android/UserListItemViewHolder.kt" />
              <option name="originalContent" value="package com.picpay.desafio.android&#10;&#10;import android.view.View&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.squareup.picasso.Callback&#10;import com.squareup.picasso.Picasso&#10;import kotlinx.android.synthetic.main.list_item_user.view.*&#10;&#10;class UserListItemViewHolder(&#10;    itemView: View&#10;) : RecyclerView.ViewHolder(itemView) {&#10;&#10;    fun bind(user: User) {&#10;        name.text = user.name&#10;        username.text = user.username&#10;        progressBar.visibility = View.VISIBLE&#10;        Picasso.get()&#10;            .load(user.img)&#10;            .error(R.drawable.ic_round_account_circle)&#10;            .into(itemView.picture, object : Callback {&#10;                override fun onSuccess() {&#10;                    itemView.progressBar.visibility = View.GONE&#10;                }&#10;&#10;                override fun onError(e: Exception?) {&#10;                    itemView.progressBar.visibility = View.GONE&#10;                }&#10;            })&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.picpay.desafio.android&#10;&#10;import android.view.View&#10;import android.widget.ImageView&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.squareup.picasso.Callback&#10;import com.squareup.picasso.Picasso&#10;&#10;class UserListItemViewHolder(&#10;    itemView: View&#10;) : RecyclerView.ViewHolder(itemView) {&#10;    private val name: TextView = itemView.findViewById(R.id.name)&#10;    private val username: TextView = itemView.findViewById(R.id.username)&#10;    private val progressBar: ProgressBar = itemView.findViewById(R.id.progressBar)&#10;    private val picture: ImageView = itemView.findViewById(R.id.picture)&#10;&#10;    fun bind(user: User) {&#10;        name.text = user.name&#10;        username.text = user.username&#10;        progressBar.visibility = View.VISIBLE&#10;        Picasso.get()&#10;            .load(user.img)&#10;            .error(R.drawable.ic_round_account_circle)&#10;            .into(picture, object : Callback {&#10;                override fun onSuccess() {&#10;                    progressBar.visibility = View.GONE&#10;                }&#10;&#10;                override fun onError(e: Exception?) {&#10;                    progressBar.visibility = View.GONE&#10;                }&#10;            })&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.android.library) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    //alias(libs.plugins.kotlin.parcelize) apply false&#10;}&#10;&#10;tasks.register(&quot;clean&quot;, Delete) {&#10;    delete rootProject.buildDir&#10;}&#10;&#10;allprojects {&#10;    repositories {&#10;        google()&#10;        mavenCentral()&#10;        maven { url 'https://jitpack.io' }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application) apply false&#10;    alias(libs.plugins.android.library) apply false&#10;    alias(libs.plugins.kotlin.android) apply false&#10;    //alias(libs.plugins.kotlin.parcelize) apply false&#10;}&#10;&#10;tasks.register(&quot;clean&quot;, Delete) {&#10;    delete rootProject.buildDir&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/designsystem/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/designsystem/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.bina.core.designsystem&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 26&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = &quot;1.5.14&quot;&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui.graphics.android)&#10;    implementation(libs.androidx.ui.text.android)&#10;    implementation(libs.androidx.material3.android)&#10;    implementation(libs.androidx.ui.tooling.preview.android)&#10;    implementation(libs.androidx.ui.tooling)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.compose.compiler)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.bina.core.designsystem&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 26&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;    composeOptions {&#10;        kotlinCompilerExtensionVersion = libs.versions.compose.compiler.get()&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui.graphics.android)&#10;    implementation(libs.androidx.ui.text.android)&#10;    implementation(libs.androidx.material3.android)&#10;    implementation(libs.androidx.ui.tooling.preview.android)&#10;    implementation(libs.androidx.ui.tooling)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/core/designsystem/src/main/java/com/bina/core/designsystem/preview/DimensPreview.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/core/designsystem/src/main/java/com/bina/core/designsystem/preview/DimensPreview.kt" />
              <option name="originalContent" value="package com.bina.core.designsystem.preview&#10;&#10;import android.view.Surface&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.bina.core.designsystem.dimens.Dimens&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun DimensPreview() {&#10;    val dimens = listOf(&#10;        &quot;spacing2&quot; to Dimens.spacing2,&#10;        &quot;spacing4&quot; to Dimens.spacing4,&#10;        &quot;spacing8&quot; to Dimens.spacing8,&#10;        &quot;spacing12&quot; to Dimens.spacing12,&#10;        &quot;spacing16&quot; to Dimens.spacing16,&#10;        &quot;spacing24&quot; to Dimens.spacing24,&#10;        &quot;spacing32&quot; to Dimens.spacing32,&#10;        &quot;spacing40&quot; to Dimens.spacing40,&#10;        &quot;spacing64&quot; to Dimens.spacing64,&#10;    )&#10;    Surface(color = MaterialTheme.colorScheme.background) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            dimens.forEach { (name, value) -&gt;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .height(24.dp)&#10;                            .width(value)&#10;                            .background(Color.Gray)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;                    Text(text = &quot;$name = ${value.value.toInt()}dp&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.bina.core.designsystem.preview&#10;&#10;import android.view.Surface&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.material3.Surface&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import com.bina.core.designsystem.dimens.Dimens&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun DimensPreview() {&#10;    val dimens = listOf(&#10;        &quot;spacing2&quot; to Dimens.spacing2,&#10;        &quot;spacing4&quot; to Dimens.spacing4,&#10;        &quot;spacing8&quot; to Dimens.spacing8,&#10;        &quot;spacing12&quot; to Dimens.spacing12,&#10;        &quot;spacing16&quot; to Dimens.spacing16,&#10;        &quot;spacing24&quot; to Dimens.spacing24,&#10;        &quot;spacing32&quot; to Dimens.spacing32,&#10;        &quot;spacing40&quot; to Dimens.spacing40,&#10;        &quot;spacing64&quot; to Dimens.spacing64,&#10;    )&#10;    Surface(color = MaterialTheme.colorScheme.background) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            dimens.forEach { (name, value) -&gt;&#10;                Row(&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .height(24.dp)&#10;                            .width(value)&#10;                            .background(Color.Gray)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(12.dp))&#10;                    Text(text = &quot;$name = ${value.value.toInt()}dp&quot;)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/feature/home/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/feature/home/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;kotlin-parcelize&quot;)&#10;    id(&quot;org.jetbrains.kotlin.kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.bina.home&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 26&#10;        targetSdk = 36&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(project(&quot;:core:designsystem&quot;))&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.coil.compose)&#10;    implementation(libs.koin.android)&#10;    implementation(libs.koin.androidx.compose)&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    implementation(libs.androidx.navigation.runtime.ktx)&#10;    implementation(libs.insert.koin.koin.android)&#10;    implementation(libs.io.insert.koin.koin.androidx.compose)&#10;    kapt(libs.androidx.room.compiler)&#10;    testImplementation(libs.junit)&#10;    implementation(libs.retrofit2)&#10;    implementation(libs.retrofit2.converter.gson)&#10;    testImplementation(&quot;io.mockk:mockk:1.13.10&quot;)&#10;    testImplementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:1.8.0&quot;)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;    testImplementation(kotlin(&quot;test&quot;))&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.library)&#10;    alias(libs.plugins.kotlin.android)&#10;    alias(libs.plugins.kotlin.compose)&#10;    id(&quot;kotlin-parcelize&quot;)&#10;    id(&quot;org.jetbrains.kotlin.kapt&quot;)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.bina.home&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        minSdk = 26&#10;        targetSdk = 36&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        compose = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;    implementation(project(&quot;:core:designsystem&quot;))&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.lifecycle.runtime.ktx)&#10;    implementation(libs.androidx.activity.compose)&#10;    implementation(platform(libs.androidx.compose.bom))&#10;    implementation(libs.androidx.ui)&#10;    implementation(libs.coil.compose)&#10;    implementation(libs.koin.android)&#10;    implementation(libs.koin.androidx.compose)&#10;    implementation(libs.androidx.room.runtime)&#10;    implementation(libs.androidx.room.ktx)&#10;    implementation(libs.androidx.navigation.runtime.ktx)&#10;    kapt(libs.androidx.room.compiler)&#10;    testImplementation(libs.junit)&#10;    implementation(libs.retrofit2)&#10;    implementation(libs.retrofit2.converter.gson)&#10;    testImplementation(&quot;io.mockk:mockk:1.13.10&quot;)&#10;    testImplementation(&quot;org.jetbrains.kotlinx:kotlinx-coroutines-test:1.8.0&quot;)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;    androidTestImplementation(platform(libs.androidx.compose.bom))&#10;    androidTestImplementation(libs.androidx.ui.test.junit4)&#10;    debugImplementation(libs.androidx.ui.tooling)&#10;    debugImplementation(libs.androidx.ui.test.manifest)&#10;    testImplementation(kotlin(&quot;test&quot;))&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/gradle/libs.versions.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/gradle/libs.versions.toml" />
              <option name="originalContent" value="[versions]&#10;agp = &quot;8.11.1&quot;&#10;coilCompose = &quot;2.7.0&quot;&#10;converterGson = &quot;2.9.0&quot;&#10;koinAndroid = &quot;3.5.3&quot;&#10;koinAndroidVersion = &quot;3.5.0&quot;&#10;koinAndroidxCompose = &quot;3.5.3&quot;&#10;koinAndroidxComposeVersion = &quot;3.5.0&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;kotlinCompose = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;appcompat = &quot;1.7.1&quot;&#10;material = &quot;1.12.0&quot;&#10;retrofit = &quot;2.9.0&quot;&#10;uiGraphicsAndroid = &quot;1.8.3&quot;&#10;uiTextAndroid = &quot;1.8.3&quot;&#10;material3Android = &quot;1.3.2&quot;&#10;uiToolingPreviewAndroid = &quot;1.8.3&quot;&#10;navigationRuntimeAndroid = &quot;2.9.3&quot;&#10;runtimeAndroid = &quot;1.8.3&quot;&#10;navigationComposeJvmstubs = &quot;2.9.3&quot;&#10;navigationComposeAndroid = &quot;2.9.3&quot;&#10;roomCommonJvm = &quot;2.7.2&quot;&#10;roomVersion = &quot;2.7.2&quot;&#10;roomRuntimeAndroid = &quot;2.7.2&quot;&#10;androidxRoomRuntime = &quot;androidx.room:room-runtime:2.6.1&quot;&#10;androidxRoomCompiler = &quot;androidx.room:room-compiler:2.6.1&quot;&#10;androidxRoomKtx = &quot;androidx.room:room-ktx:2.6.1&quot;&#10;navigationRuntimeKtx = &quot;2.9.3&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;coil-compose = { module = &quot;io.coil-kt:coil-compose&quot;, version.ref = &quot;coilCompose&quot; }&#10;converter-gson = { module = &quot;com.squareup.retrofit2:converter-gson&quot;, version.ref = &quot;converterGson&quot; }&#10;insert-koin-koin-android = { module = &quot;io.insert-koin:koin-android&quot;, version.ref = &quot;koinAndroidVersion&quot; }&#10;io-insert-koin-koin-androidx-compose = { module = &quot;io.insert-koin:koin-androidx-compose&quot;, version.ref = &quot;koinAndroidxComposeVersion&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;koin-android = { module = &quot;org.koin:koin-android&quot;, version.ref = &quot;koinAndroid&quot; }&#10;koin-androidx-compose = { module = &quot;org.koin:koin-androidx-compose&quot;, version.ref = &quot;koinAndroidxCompose&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;androidx-ui-graphics-android = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics-android&quot;, version.ref = &quot;uiGraphicsAndroid&quot; }&#10;androidx-ui-text-android = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-text-android&quot;, version.ref = &quot;uiTextAndroid&quot; }&#10;androidx-material3-android = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3-android&quot;, version.ref = &quot;material3Android&quot; }&#10;androidx-ui-tooling-preview-android = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview-android&quot;, version.ref = &quot;uiToolingPreviewAndroid&quot; }&#10;androidx-navigation-runtime-android = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-runtime-android&quot;, version.ref = &quot;navigationRuntimeAndroid&quot; }&#10;androidx-runtime-android = { group = &quot;androidx.compose.runtime&quot;, name = &quot;runtime-android&quot;, version.ref = &quot;runtimeAndroid&quot; }&#10;androidx-navigation-compose-android = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose-android&quot;, version.ref = &quot;navigationComposeAndroid&quot; }&#10;retrofit = { module = &quot;com.squareup.retrofit2:retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;androidx-room-common-jvm = { group = &quot;androidx.room&quot;, name = &quot;room-common-jvm&quot;, version.ref = &quot;roomCommonJvm&quot; }&#10;androidx-room-runtime = { module = &quot;androidx.room:room-runtime&quot;, version.ref = &quot;roomVersion&quot; }&#10;androidx-room-compiler = { module = &quot;androidx.room:room-compiler&quot;, version.ref = &quot;roomVersion&quot; }&#10;androidx-room-ktx = { module = &quot;androidx.room:room-ktx&quot;, version.ref = &quot;roomVersion&quot; }&#10;retrofit2 = { module = &quot;com.squareup.retrofit2:retrofit&quot;, version = &quot;2.9.0&quot; }&#10;retrofit2-converter-gson = { module = &quot;com.squareup.retrofit2:converter-gson&quot;, version = &quot;2.9.0&quot; }&#10;androidx-navigation-runtime-ktx = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-runtime-ktx&quot;, version.ref = &quot;navigationRuntimeKtx&quot; }&#10;&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlinCompose&quot; }&#10;detekt = { id = &quot;io.gitlab.arturbosch.detekt&quot;, version = &quot;1.23.5&quot; }&#10;ktlint = { id = &quot;org.jlleitschuh.gradle.ktlint&quot;, version = &quot;12.1.1&quot; }&#10;jacoco = { id = &quot;jacoco&quot; }&#10;android-library = { id = &quot;com.android.library&quot;, version.ref = &quot;agp&quot; }&#10;" />
              <option name="updatedContent" value="[versions]&#10;agp = &quot;8.11.1&quot;&#10;coilCompose = &quot;2.7.0&quot;&#10;converterGson = &quot;2.9.0&quot;&#10;koinAndroid = &quot;3.5.3&quot;&#10;koinAndroidVersion = &quot;3.5.0&quot;&#10;koinAndroidxCompose = &quot;3.5.3&quot;&#10;koinAndroidxComposeVersion = &quot;3.5.0&quot;&#10;kotlin = &quot;2.0.21&quot;&#10;kotlinCompose = &quot;2.0.21&quot;&#10;coreKtx = &quot;1.16.0&quot;&#10;junit = &quot;4.13.2&quot;&#10;junitVersion = &quot;1.3.0&quot;&#10;espressoCore = &quot;3.7.0&quot;&#10;lifecycleRuntimeKtx = &quot;2.9.2&quot;&#10;activityCompose = &quot;1.10.1&quot;&#10;composeBom = &quot;2024.09.00&quot;&#10;appcompat = &quot;1.7.1&quot;&#10;material = &quot;1.12.0&quot;&#10;retrofit = &quot;2.9.0&quot;&#10;uiGraphicsAndroid = &quot;1.8.3&quot;&#10;uiTextAndroid = &quot;1.8.3&quot;&#10;material3Android = &quot;1.3.2&quot;&#10;uiToolingPreviewAndroid = &quot;1.8.3&quot;&#10;navigationRuntimeAndroid = &quot;2.9.3&quot;&#10;runtimeAndroid = &quot;1.8.3&quot;&#10;navigationComposeJvmstubs = &quot;2.9.3&quot;&#10;navigationComposeAndroid = &quot;2.9.3&quot;&#10;roomCommonJvm = &quot;2.7.2&quot;&#10;roomVersion = &quot;2.7.2&quot;&#10;roomRuntimeAndroid = &quot;2.7.2&quot;&#10;androidxRoomRuntime = &quot;androidx.room:room-runtime:2.6.1&quot;&#10;androidxRoomCompiler = &quot;androidx.room:room-compiler:2.6.1&quot;&#10;androidxRoomKtx = &quot;androidx.room:room-ktx:2.6.1&quot;&#10;navigationRuntimeKtx = &quot;2.9.3&quot;&#10;&#10;[libraries]&#10;androidx-core-ktx = { group = &quot;androidx.core&quot;, name = &quot;core-ktx&quot;, version.ref = &quot;coreKtx&quot; }&#10;coil-compose = { module = &quot;io.coil-kt:coil-compose&quot;, version.ref = &quot;coilCompose&quot; }&#10;converter-gson = { module = &quot;com.squareup.retrofit2:converter-gson&quot;, version.ref = &quot;converterGson&quot; }&#10;insert-koin-koin-android = { module = &quot;io.insert-koin:koin-android&quot;, version.ref = &quot;koinAndroidVersion&quot; }&#10;io-insert-koin-koin-androidx-compose = { module = &quot;io.insert-koin:koin-androidx-compose&quot;, version.ref = &quot;koinAndroidxComposeVersion&quot; }&#10;junit = { group = &quot;junit&quot;, name = &quot;junit&quot;, version.ref = &quot;junit&quot; }&#10;androidx-junit = { group = &quot;androidx.test.ext&quot;, name = &quot;junit&quot;, version.ref = &quot;junitVersion&quot; }&#10;androidx-espresso-core = { group = &quot;androidx.test.espresso&quot;, name = &quot;espresso-core&quot;, version.ref = &quot;espressoCore&quot; }&#10;androidx-lifecycle-runtime-ktx = { group = &quot;androidx.lifecycle&quot;, name = &quot;lifecycle-runtime-ktx&quot;, version.ref = &quot;lifecycleRuntimeKtx&quot; }&#10;androidx-activity-compose = { group = &quot;androidx.activity&quot;, name = &quot;activity-compose&quot;, version.ref = &quot;activityCompose&quot; }&#10;androidx-compose-bom = { group = &quot;androidx.compose&quot;, name = &quot;compose-bom&quot;, version.ref = &quot;composeBom&quot; }&#10;androidx-ui = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui&quot; }&#10;androidx-ui-graphics = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics&quot; }&#10;androidx-ui-tooling = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling&quot; }&#10;androidx-ui-tooling-preview = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview&quot; }&#10;androidx-ui-test-manifest = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-manifest&quot; }&#10;androidx-ui-test-junit4 = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-test-junit4&quot; }&#10;androidx-material3 = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3&quot; }&#10;androidx-appcompat = { group = &quot;androidx.appcompat&quot;, name = &quot;appcompat&quot;, version.ref = &quot;appcompat&quot; }&#10;koin-android = { module = &quot;org.koin:koin-android&quot;, version.ref = &quot;koinAndroid&quot; }&#10;koin-androidx-compose = { module = &quot;org.koin:koin-androidx-compose&quot;, version.ref = &quot;koinAndroidxCompose&quot; }&#10;material = { group = &quot;com.google.android.material&quot;, name = &quot;material&quot;, version.ref = &quot;material&quot; }&#10;androidx-ui-graphics-android = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-graphics-android&quot;, version.ref = &quot;uiGraphicsAndroid&quot; }&#10;androidx-ui-text-android = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-text-android&quot;, version.ref = &quot;uiTextAndroid&quot; }&#10;androidx-material3-android = { group = &quot;androidx.compose.material3&quot;, name = &quot;material3-android&quot;, version.ref = &quot;material3Android&quot; }&#10;androidx-ui-tooling-preview-android = { group = &quot;androidx.compose.ui&quot;, name = &quot;ui-tooling-preview-android&quot;, version.ref = &quot;uiToolingPreviewAndroid&quot; }&#10;androidx-navigation-runtime-android = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-runtime-android&quot;, version.ref = &quot;navigationRuntimeAndroid&quot; }&#10;androidx-runtime-android = { group = &quot;androidx.compose.runtime&quot;, name = &quot;runtime-android&quot;, version.ref = &quot;runtimeAndroid&quot; }&#10;androidx-navigation-compose-android = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-compose-android&quot;, version.ref = &quot;navigationComposeAndroid&quot; }&#10;retrofit = { module = &quot;com.squareup.retrofit2:retrofit&quot;, version.ref = &quot;retrofit&quot; }&#10;androidx-room-common-jvm = { group = &quot;androidx.room&quot;, name = &quot;room-common-jvm&quot;, version.ref = &quot;roomCommonJvm&quot; }&#10;androidx-room-runtime = { module = &quot;androidx.room:room-runtime&quot;, version.ref = &quot;roomVersion&quot; }&#10;androidx-room-compiler = { module = &quot;androidx.room:room-compiler&quot;, version.ref = &quot;roomVersion&quot; }&#10;androidx-room-ktx = { module = &quot;androidx.room:room-ktx&quot;, version.ref = &quot;roomVersion&quot; }&#10;retrofit2 = { module = &quot;com.squareup.retrofit2:retrofit&quot;, version = &quot;2.9.0&quot; }&#10;retrofit2-converter-gson = { module = &quot;com.squareup.retrofit2:converter-gson&quot;, version = &quot;2.9.0&quot; }&#10;androidx-navigation-runtime-ktx = { group = &quot;androidx.navigation&quot;, name = &quot;navigation-runtime-ktx&quot;, version.ref = &quot;navigationRuntimeKtx&quot; }&#10;&#10;&#10;[plugins]&#10;android-application = { id = &quot;com.android.application&quot;, version.ref = &quot;agp&quot; }&#10;kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }&#10;kotlin-compose = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlinCompose&quot; }&#10;compose-compiler = { id = &quot;org.jetbrains.kotlin.plugin.compose.compiler&quot;, version = &quot;1.5.13&quot; }&#10;detekt = { id = &quot;io.gitlab.arturbosch.detekt&quot;, version = &quot;1.23.5&quot; }&#10;ktlint = { id = &quot;org.jlleitschuh.gradle.ktlint&quot;, version = &quot;12.1.1&quot; }&#10;jacoco = { id = &quot;jacoco&quot; }&#10;android-library = { id = &quot;com.android.library&quot;, version.ref = &quot;agp&quot; }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>